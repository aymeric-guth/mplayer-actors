13/05/22
* feature: anchor / marque page dans le menu de navigation (dynamique)
* feature: loop mode on / off + intégration playlist
* feature: gui loop
14/05/22
* feature: historique des commandes (promt)
* bugfix: normal playback fin playback
* bugfix: loopmode sur playlist (Sig.NEXT quand envoie alt_h ou alt_l)
* bugfix: keybinds playback quand le player n'est pas lancé
15/05/22
* refactor: migration vers une api ou le caller et le receiver sont agnostique de la ref à l'acteur
    utilisation des pid pour l'api publique, seul l'acteur systeme voit les references aux instances des acteurs
* bugfix: fichiers placeholders affichés au chargement de l'application
* bugfix: une ref était encore utilisée pour le cas ou un actor s'envoyait un message à lui même
* refactor: séparation du library code et de l'application code
* feature: bouger le curseur avec <- -> dans en prompt mode
* refactor: prompt -> actor

22/05/22
* bugfix: command history quan historique vide
* début migration séparation signaux et events
    utiliser des méthodes pour la gestion des signaux lib
    (init, terminate, ...)
    Sig.POISON, Sig.SIGQUIT, Sig.SIGINT, Sig.INIT, 

26/05/22
* bugfix: race condition dans la logique d'exit
* bugfix: playback overlay qui ne s'update pas et keybind qui ne répondent plus (sur le player)
* bugfix: montage démontage acteur Files au démarrage de l'app
* refactor: curses -> actor
* refactor: séparation des messages en messages lib et message application
    Message() pour lib, {'event': ''} pour code application
    utiliser du single dispatch pour match les types
* architecture: 
    api:
        async messaging
        request response
        pub sub
* architecture:
    events externes (non-Message)
        socket io # network input
        stdscr.getch() # keyboard input
        MpvEvent # mpv event loop

        solution temporaire override run() et utiliser un acteur sans mq
        couplé à un autre acteur qui process les events
        problème: communication à sens unique (event-loop -> acteur)

        partie polling dans un thread séparé et callback avec un post dans la mq?

* architecture:
    event
    request / response
    pour le moment (et le temps à venir) le modèle request / response est implémenté avec 2 messages différents
    event: fait, chose qui est arrivé


27/05/22
* feature: redispatch / forward to child permet de router un message à un enfant si incapable de le gérer (implémentation coté ActorSystem via DispatchError et implémentation à la discretion de l'acteur via une methode privée dispatch_handler)