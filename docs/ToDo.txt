### Bugfix ###
* bugfix: defer() qui peut deadlock dans le cas ou un acteur (enregistré) a SystemExit pour SUBSCRIBE et UNSUBSCRIBE
* refactor: préparation class Files en vue de l'implémentation de la recherche récursive
* refactor: routing des requests API en particulier /get_files
* bugfix: la référence à self.child n'est pas safe (0 = ActorSystem) elle peut entrainer à des bugs pendant l'initialisation et la déinitialisation
  remplacer par un call à l'actor system?
* bugfix: cursor qui jump sur playback_overlay pendant la lecture et que la command prompt est active
* bugfix: déallocation propre du core et client de libmpv (stopper le core et quitter)
* bugfix: deadlock dans la procédure de sortie (???)
* feature: forwarding policy (forward to child, raise)
* feature: rendre Playlist compatible avec streaming


### Features ###
* implémentation cache en subsystem
* search sur toute l'arbo, search recursif à partir du cwd
* feature: delete hook for invalid dir (effacé ou déplacé)
* notifications / popup (reindex, get_files done etc)
* delete dir (delete leaf directory and associated files) non recusive
* purge file (move file to .deleted special dir if exists else create .deleted in cwd)
checks:
    files in cwd
* purge . (delete .purge and all containing files)
* copy to zdj
* persistance user settings (SQLite, API REST, pickle)
* hot reload d'un acteur quand son package a été modifié
* sérialisation / déserialisation d'un acteur


### Refactor ###
* refactor Message en dict?
* refactor gestion path -> pathlib?


### Technos ###
* migration vers un autre protocole de partage (streaming)


### Architecture


### Event Loop
  Blocking Event Sources:
    * MPV Event Loop
    * STDIN - select
    * network (TCP socket 8080, TCP socket Logs) - select

Problem:
  Socket:
    model request -> response
    model 2 canaux


### Migration 

Golang
+++
  concurrency model (Communicating Sequential Processes)
  go channels
  go routines
  GC
---
  les défauts de C (syntaxe pointers)
  aspects du langage ont l'air un peu vétuste
  syntaxe pas dingue


Dart
+++
  isolates (message passing)
  concurrency model (plus proche de l'Actor model)
  documentation
  moderne
  null safety
  GC
  hot-reload
  compiled
  syntaxe java / js assez épurée
---
  marginal en dehors de flutter?
  "it’s unclear how much effort Google is willing to continue to put into server side Dart code."
  manque de librairies apparement


Kotlin
+++
---


Rust
+++
---


Elixir / Erlang
+++
  FP
  Implémentation de référence de l'Actor model
  BEAM à l'air ouf
  https://phoenixframework.org/
  structural pattern matching
  hot reload
---
  dynamique
  ressources et documentation ?
  ruby syntax?
res:
  https://www.youtube.com/watch?v=1hl_z9-QO9c
  https://www.youtube.com/c/omgneering/videos
  https://www.learnelixir.tv/
  https://phoenixframework.org/
  https://elixir-lang.org/


AKKA (Java)
+++
  Possibilité de FP avec Scala
  Framework de référence Actor model
  documentation à l'air bonne
---
  Java


### Google Trends
Python Java JavaScript (FP)
go C C++ C#
Kotlin (FP) Dart (FP) Scala (FP) Swift (FP)
Closure (FP) Elixir (FP)

https://cs50.harvard.edu/college/2022/fall/
https://www.youtube.com/watch?v=fyg0FuSL5DY


containerisation application
  smb devient obsolète si montage depuis l'hote / sinon possibilité d'utiliser cifs directement dans le container
  transmission du flux audio vers l'hote devient problématique
    option de pulseaudio qui n'est pas compliqué à mettre en place coté hote
    option de socket tcp/udp mais besoin d'un socket server/client coté hote et donc d'un hote programme éxécuté directement sur l'hote
  besoin de joindre un build custom de ffmpeg + mpv pour linux
  perte de l'intégration avec os hote (open), compensé à terme par purge
  besoin de remanier la gestion configuration user
  processus d'itération un peu plus lent
  
essai avec flux concluant
