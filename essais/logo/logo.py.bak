import time
import os
import random

class LogoAnimation(object):

    def __init__(self):

        self.term_x, self.term_y = os.get_terminal_size(0)
        self.half_term_x = int(self.term_x / 2)
        self.half_term_y = int(self.term_y / 2)
        self.default_character = ' '
        self.disp_matrix = [ [
            self.default_character for i in range(0, self.term_x)
            ]
                for i in range(0, self.term_y)
        ]
        self.animation_matrix = self.disp_matrix.copy()

    def print_to_display(self):
        for i in self.disp_matrix:
            print(''.join(i))

    def colorize_display_matrix(self, value):
        for indice_y, value_y in enumerate(self.animation_matrix):
            for indice_x, value_x in enumerate(self.animation_matrix[indice_y]):
                self.disp_matrix[indice_y][indice_x] = (
                    value + self.disp_matrix[indice_y][indice_x] + '\033[0m'
                )

    def generate_logo(self, logo):

        self.logo_matrix = logo
        self.len_x_logo = len(self.logo_matrix[0])
        self.len_y_logo = len(self.logo_matrix)
        self.half_len_y_logo = int(self.len_y_logo / 2)
        self.half_len_x_logo = int(self.len_x_logo / 2)

    def feed_disp_matrix(self):

        offset_x_l = self.half_term_x - self.half_len_x_logo
        offset_x_r = self.half_term_x + self.half_len_x_logo
        offset_y_l = self.half_term_y - self.half_len_y_logo
        offset_y_r = self.half_term_y + self.half_len_y_logo

        for indice_y, value_y in enumerate(self.disp_matrix):
            for indice_x, value_x in enumerate(self.disp_matrix[indice_y]):

                if indice_x >= offset_x_l and indice_x < offset_x_r:
                    if indice_y >= offset_y_l and indice_y < offset_y_r:
                        y = indice_y - offset_y_l
                        x = indice_x - offset_x_l
                        if self.disp_matrix[indice_y][indice_x] != self.default_character:
                            raise OverflowError
                        self.disp_matrix[indice_y][indice_x] = self.logo_matrix[y][x]

#    def feed_disp_matrix(self, corner_y, corner_x):
#        for indice_y, value_y in enumerate(self.disp_matrix):
#            for indice_x, value_x in enumerate(self.disp_matrix[indice_y]):
#
#                offset_x_l = corner_x - self.half_len_x_logo
#                offset_x_r = corner_x + self.half_len_x_logo
#                offset_y_l = corner_y - self.half_len_y_logo
#                offset_y_r = corner_y + self.half_len_y_logo
#
#                if indice_x >= offset_x_l and indice_x < offset_x_r:
#                    if indice_y >= offset_y_l and indice_y < offset_y_r:
#
#                        y = indice_y - offset_y_l
#                        x = indice_x - offset_x_l
#                        self.disp_matrix[indice_y][indice_x] = self.logo_matrix[y][x]

    def print_logo_basic_light(self, delay):
        e1 = "\\\\\\\\"
        s1 = "       /"
        s2 = "              /"
        #disp_matrix = [ s1[i:] + (2*i * ' ') + e1 + s2[2*i:] for i in range(0, 8) ]
        disp_matrix = self.logo_matrix

        for i, value in enumerate(disp_matrix):
            os.system('clear')
            if i < 1:
                print(''.join(self.G3 + disp_matrix[i] + self.ENDC))
            elif i == 1:
                print(''.join(self.G2 + disp_matrix[i-1] + self.ENDC))
                print(''.join(self.G3 + disp_matrix[i] + self.ENDC))
            else:
                #if i >= 3:
                #    print('\n' * (i - 3))
                for ii in range(0, i - 1):
                    print(''.join(self.G1 + disp_matrix[ii] + self.ENDC))
                print(''.join(self.G2 + disp_matrix[i-1] + self.ENDC))
                print(''.join(self.G3 + disp_matrix[i] + self.ENDC))
            time.sleep(delay)

logo_matrix = [
    "        A R S               ",
    "       /\\\\\\\\              / ",
    "      /  \\\\\\\\            /  ",
    "     /    \\\\\\\\          /   ",
    "    /      \\\\\\\\        /    ",
    "   /        \\\\\\\\      /     ",
    "  /          \\\\\\\\    /      ",
    " /            \\\\\\\\  /       ",
    "/              \\\\\\\\/        ",
    "  V I R T U A L I S         ",
]

text_matrix = [
    "          A U D I O         ",
    "                            ",
    "        V I D E O           ",
    "                            ",
    "      P L A Y E R           ",
    "                            "
]
def animated_logo():
    for i in LOGO:
        os.system('clear')
        logo = LogoAnimation()
        logo.generate_logo(i)
        logo.feed_disp_matrix()
        logo.generate_animation('')

        for i in logo.disp_matrix:
            print(''.join(i))
        time.sleep(0.15)

while True:
    #os.system('clear')
    logo = LogoAnimation()
    logo.generate_logo(logo_matrix)
    logo.feed_disp_matrix()
    value = random.choice(range(0, 256))
    value = f"\033[38;5;{value}m"
    logo.colorize_display_matrix(value)
    logo.print_to_display()
    time.sleep(0.15)
